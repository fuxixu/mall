package com.example.mall.model.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.mall.model.bean.ProductInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PRODUCT_INFO".
*/
public class ProductInfoDao extends AbstractDao<ProductInfo, Long> {

    public static final String TABLENAME = "PRODUCT_INFO";

    /**
     * Properties of entity ProductInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Name = new Property(0, String.class, "name", false, "NAME");
        public final static Property ImageId = new Property(1, int.class, "imageId", false, "IMAGE_ID");
        public final static Property Param = new Property(2, String.class, "param", false, "PARAM");
        public final static Property Price = new Property(3, float.class, "price", false, "PRICE");
        public final static Property Number = new Property(4, int.class, "number", false, "NUMBER");
        public final static Property Id = new Property(5, Long.class, "id", true, "_id");
    }


    public ProductInfoDao(DaoConfig config) {
        super(config);
    }
    
    public ProductInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PRODUCT_INFO\" (" + //
                "\"NAME\" TEXT," + // 0: name
                "\"IMAGE_ID\" INTEGER NOT NULL ," + // 1: imageId
                "\"PARAM\" TEXT," + // 2: param
                "\"PRICE\" REAL NOT NULL ," + // 3: price
                "\"NUMBER\" INTEGER NOT NULL ," + // 4: number
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT );"); // 5: id
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PRODUCT_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ProductInfo entity) {
        stmt.clearBindings();
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(1, name);
        }
        stmt.bindLong(2, entity.getImageId());
 
        String param = entity.getParam();
        if (param != null) {
            stmt.bindString(3, param);
        }
        stmt.bindDouble(4, entity.getPrice());
        stmt.bindLong(5, entity.getNumber());
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(6, id);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ProductInfo entity) {
        stmt.clearBindings();
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(1, name);
        }
        stmt.bindLong(2, entity.getImageId());
 
        String param = entity.getParam();
        if (param != null) {
            stmt.bindString(3, param);
        }
        stmt.bindDouble(4, entity.getPrice());
        stmt.bindLong(5, entity.getNumber());
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(6, id);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5);
    }    

    @Override
    public ProductInfo readEntity(Cursor cursor, int offset) {
        ProductInfo entity = new ProductInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // name
            cursor.getInt(offset + 1), // imageId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // param
            cursor.getFloat(offset + 3), // price
            cursor.getInt(offset + 4), // number
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5) // id
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ProductInfo entity, int offset) {
        entity.setName(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setImageId(cursor.getInt(offset + 1));
        entity.setParam(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPrice(cursor.getFloat(offset + 3));
        entity.setNumber(cursor.getInt(offset + 4));
        entity.setId(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ProductInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ProductInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ProductInfo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
